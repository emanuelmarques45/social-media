@page "/feed"

@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Http
@using SocialMedia.Classes.Dtos.Likes
@using SocialMedia.Classes.Dtos.Post
@using SocialMedia.Classes.Interfaces
@using SocialMedia.Classes.Models

@attribute [Authorize]
@inject IAuthService UserAccessor
@inject ILikeService LikeService

<PageTitle>Auth</PageTitle>

<MudText Class="mb-4">Hello @user?.Name</MudText>
@foreach (var post in posts)
{
    <MudCard>
        <MudStack Row>
            <MudText Typo="Typo.subtitle1">@post?.User.UserName</MudText>
        </MudStack>
        <MudText>@post?.Content</MudText>
        <MudStack Row>
            @if (post.Likes.Any(l => l.UserId == user?.Id))
            {
                <MudIconButton Icon="@Icons.Material.Filled.ThumbUp">Liked</MudIconButton>
            }
            else
            {
                <MudIconButton Icon="@Icons.Material.Filled.ThumbUp" OnClick="() => LikePost(post)">Like</MudIconButton>
            }
            <MudIconButton Icon="@Icons.Material.Filled.Comment">Comment</MudIconButton>
        </MudStack>
    </MudCard>
}

@code {
    private List<PostResponseDto> posts = [];
    private UserModel user = default!;

    [Inject]
    private IPostService PostService { get; set; } = default!;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        posts = await PostService.GetAll();
        user = await UserAccessor.GetCurrentUser() ?? new();
    }

    private async Task LikePost(PostResponseDto post)
    {
        var likeDto = new CreateLikeRequestDto
            {
                UserId = "fb1a3775-c90b-4bec-8cf6-b40ae66fb6fa",
                PostId = post.Id
            };

        await LikeService.LikePost(likeDto);

        post = await PostService.GetById(post.Id) ?? new();
    }
}