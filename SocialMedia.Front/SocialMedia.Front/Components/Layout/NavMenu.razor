@using Microsoft.AspNetCore.Identity
@using SocialMedia.Classes.Interfaces
@using SocialMedia.Classes.Models
@using SocialMedia.Front.Components.Account

@implements IDisposable
@inject NavigationManager NavigationManager
@inject IAuthService AuthService
@rendermode InteractiveServer

<MudAppBar>
    <div class="d-flex justify-space-between align-center" style="width: 100%">
        <div>
            <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())" />
            Social Media
        </div>
        <AuthorizeView>
            @if (User is not null)
            {
                <p>Hello, @(User?.Name ?? "User") !</p>
            }
        </AuthorizeView>
    </div>
</MudAppBar>
<MudDrawer @bind-Open="@_drawerOpen" Elevation="1" Variant="@DrawerVariant.Temporary" Anchor="Anchor.Top">
    <MudDrawerHeader>
        <MudText Typo="Typo.h6">Social Media</MudText>
    </MudDrawerHeader>
    <MudNavMenu>
        <MudNavLink Href="/" Match="NavLinkMatch.All" Icon="@Icons.Material.Filled.Home">Home</MudNavLink>
        <MudNavLink Href="/feed" Match="NavLinkMatch.All" Icon="@Icons.Material.Filled.Feed">Feed</MudNavLink>
        <MudNavLink Href="/auth" Match="NavLinkMatch.All" Icon="@Icons.Material.Filled.Lock">Auth</MudNavLink>
        <AuthorizeView>
            <Authorized>
                <MudNavLink Icon="@Icons.Material.Filled.ExitToApp">
                    <form action="Account/Logout" method="post">
                        <AntiforgeryToken />
                        <input type="hidden" name="ReturnUrl" value="@currentUrl" />
                        <button type="submit" class="nav-link">
                            <span class="bi bi-arrow-bar-left-nav-menu" aria-hidden="true"></span> Logout
                        </button>
                    </form>
                </MudNavLink>
            </Authorized>
            <NotAuthorized>
                <MudNavLink Href="/account/login" Match="NavLinkMatch.All">Login</MudNavLink>
            </NotAuthorized>
        </AuthorizeView>
    </MudNavMenu>
</MudDrawer>


@code {
    private string? currentUrl;
    private UserModel User = default!;
    bool _drawerOpen;

    void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        User = await AuthService.GetCurrentUser() ?? new();
    }

    protected override void OnInitialized()
    {
        currentUrl = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
        NavigationManager.LocationChanged += OnLocationChanged;
    }

    private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        currentUrl = NavigationManager.ToBaseRelativePath(e.Location);
        StateHasChanged();
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= OnLocationChanged;
    }
}

